"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const picomatch = __importStar(require("picomatch"));
const events_1 = require("../utils/events");
const hashcode_1 = require("../utils/hashcode");
class Configuration {
    constructor(json) {
        this.json = json;
    }
    isEnabled() {
        return (this.json?.enabled) === undefined || "off" !== (this.json?.enabled);
    }
    canSend(event) {
        if (!this.isEnabled()) {
            return false;
        }
        if (["error", "crash"].includes(this.json?.enabled) && !(0, events_1.isError)(event)) {
            return false;
        }
        const currUserRatioValue = (0, hashcode_1.numValue)(event.userId);
        const configuredRatio = getRatio(this.json?.ratio);
        if (configuredRatio < currUserRatioValue) {
            return false;
        }
        const isIncluded = this.isIncluded(event, currUserRatioValue)
            && !this.isExcluded(event, currUserRatioValue);
        return isIncluded;
    }
    getDailyLimit(event) {
        const includes = this.getIncludePatterns();
        if (includes.length) {
            const pattern = includes.filter(isEventNamePattern).map(p => p)
                .find(p => picomatch.isMatch(event.event, p.name));
            if (pattern?.dailyLimit) {
                try {
                    return parseInt(pattern.dailyLimit);
                }
                catch (e) {
                    // ignore
                }
            }
        }
        return Number.MAX_VALUE;
    }
    isIncluded(event, currUserRatioValue) {
        const includes = this.getIncludePatterns();
        if (includes.length) {
            return this.isEventMatching(event, includes, currUserRatioValue, true);
        }
        return true;
    }
    isExcluded(event, currUserRatioValue) {
        const excludes = this.getExcludePatterns();
        if (excludes.length) {
            return this.isEventMatching(event, excludes, currUserRatioValue, false);
        }
        return false;
    }
    getIncludePatterns() {
        if (this.json?.includes) {
            return this.json.includes;
        }
        return [];
    }
    getExcludePatterns() {
        if (this.json?.excludes) {
            return this.json.excludes;
        }
        return [];
    }
    isEventMatching(event, patterns, currUserRatioValue, including) {
        if (!patterns || !patterns.length) {
            return false;
        }
        const match = patterns.find(evtPtn => {
            if (isPropertyPattern(evtPtn)) {
                const props = event.properties;
                if (props) {
                    const value = props[evtPtn.property];
                    const propertyPattern = evtPtn.value;
                    if (value && picomatch.isMatch(value, propertyPattern)) {
                        return true;
                    }
                }
            }
            else {
                const eventNamePattern = evtPtn.name;
                if (eventNamePattern && event.event && picomatch.isMatch(event.event, eventNamePattern)) {
                    const configuredEventRatio = getRatio(evtPtn?.ratio);
                    if (including) {
                        return currUserRatioValue <= configuredEventRatio;
                    }
                    // excluding 90% of user means keeping 10%
                    // so user ratio value of 0.11 should be excluded (i.e match) when excluded event ratio = 0.9
                    return currUserRatioValue > 1 - configuredEventRatio;
                }
            }
            return false;
        });
        return !!match;
    }
}
exports.Configuration = Configuration;
function getRatio(ratioAsString) {
    if (ratioAsString) {
        try {
            return parseFloat(ratioAsString);
        }
        catch (e) {
            // ignore
        }
    }
    return 1.0;
}
function isPropertyPattern(event) {
    if (event.property) {
        return true;
    }
    return false;
}
function isEventNamePattern(event) {
    if (event.name) {
        return true;
    }
    return false;
}
//# sourceMappingURL=configuration.js.map