"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtension = getExtension;
exports.getExtensionId = getExtensionId;
exports.loadPackageJson = loadPackageJson;
exports.getPackageJson = getPackageJson;
const path_1 = __importDefault(require("path"));
const fsUtils_1 = require("../vscode/fsUtils");
const constants_1 = require("../impl/constants");
async function getExtension(context) {
    if (context.extension) {
        return context.extension;
    }
    //When running in older vscode versions:
    const packageJson = await loadPackageJson(context.extensionPath);
    const info = {
        id: getExtensionId(packageJson),
        packageJSON: packageJson
    };
    return info;
}
function getExtensionId(packageJson) {
    return `${packageJson.publisher}.${packageJson.name}`;
}
async function loadPackageJson(extensionPath) {
    const packageJsonPath = path_1.default.resolve(extensionPath, 'package.json');
    const rawdata = await (0, fsUtils_1.readFile)(packageJsonPath);
    const packageJson = JSON.parse(rawdata);
    return packageJson;
}
function getPackageJson(extension) {
    const packageJson = extension.packageJSON;
    if (!packageJson.segmentWriteKey) {
        packageJson.segmentWriteKey = constants_1.DEFAULT_SEGMENT_KEY;
    }
    if (!packageJson.segmentWriteKeyDebug) {
        packageJson.segmentWriteKeyDebug = constants_1.DEFAULT_SEGMENT_DEBUG_KEY;
    }
    return packageJson;
}
//# sourceMappingURL=extensions.js.map