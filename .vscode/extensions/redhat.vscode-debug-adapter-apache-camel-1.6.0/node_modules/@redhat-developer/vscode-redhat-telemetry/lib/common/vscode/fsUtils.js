"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exists = exists;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.mkdir = mkdir;
exports.deleteFile = deleteFile;
exports.ensureParentExists = ensureParentExists;
const vscode_1 = require("vscode");
const logger_1 = require("../utils/logger");
//Hacky way to get Text(En|De)code work in both Node and Webworker environments
const globalObj = globalThis;
const decoder = new globalObj.TextDecoder();
const encoder = new globalObj.TextEncoder();
async function exists(pathOrUri) {
    const uri = getUri(pathOrUri);
    try {
        logger_1.Logger.log('Checking ' + uri);
        await vscode_1.workspace.fs.stat(uri);
        return true;
    }
    catch (e) {
        logger_1.Logger.log(uri + ' doesn\'t exist');
        return false;
    }
}
async function readFile(pathOrUri) {
    const uri = getUri(pathOrUri);
    logger_1.Logger.log('Reading ' + uri);
    const read = await vscode_1.workspace.fs.readFile(uri);
    return decoder.decode(read);
}
async function writeFile(pathOrUri, content) {
    const uri = getUri(pathOrUri);
    await ensureParentExists(uri);
    logger_1.Logger.log('Writing ' + uri);
    const contentAsUint8Array = encoder.encode(content);
    return vscode_1.workspace.fs.writeFile(uri, contentAsUint8Array);
}
async function mkdir(pathOrUri) {
    const uri = getUri(pathOrUri);
    logger_1.Logger.log('Creating ' + uri);
    await vscode_1.workspace.fs.createDirectory(uri);
}
async function deleteFile(pathOrUri) {
    const uri = getUri(pathOrUri);
    logger_1.Logger.log('Deleting ' + uri);
    return vscode_1.workspace.fs.delete(uri);
}
async function ensureParentExists(uri) {
    const parent = vscode_1.Uri.joinPath(uri, '..');
    if (!(await exists(parent))) {
        await mkdir(parent);
    }
}
function getUri(pathOrUri) {
    if (pathOrUri instanceof vscode_1.Uri) {
        return pathOrUri;
    }
    return vscode_1.Uri.file(pathOrUri);
}
//# sourceMappingURL=fsUtils.js.map