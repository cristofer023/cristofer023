"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTracker = void 0;
class EventTracker {
    constructor(globalState) {
        this.globalState = globalState;
    }
    async storeEventCount(payload, newCount) {
        const newTracking = {
            count: newCount,
            lastUpdated: this.getTodaysTimestamp()
        };
        return this.globalState.update(this.getEventTrackingKey(payload.event), newTracking);
    }
    async getEventCount(payload) {
        const eventTracking = this.globalState.get(this.getEventTrackingKey(payload.event));
        if (eventTracking) {
            //Check if eventTracking timestamp is older than today
            let today = this.getTodaysTimestamp();
            let lastEventDay = eventTracking.lastUpdated;
            //check if now and lastEventTime are in the same day
            if (lastEventDay === today) {
                return eventTracking.count;
            }
            // new day, reset count
        }
        return 0;
    }
    getTodaysTimestamp() {
        const now = new Date();
        now.setHours(0, 0, 0, 0);
        return now.getTime();
    }
    getEventTrackingKey(eventName) {
        //replace all non alphanumeric characters with a _
        const key = eventName.replace(/[^a-zA-Z0-9]/g, '_');
        return `telemetry.events.tracking.${key}`;
    }
}
exports.EventTracker = EventTracker;
//# sourceMappingURL=eventTracker.js.map