"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryServiceBuilder = void 0;
const telemetryServiceImpl_1 = require("./impl/telemetryServiceImpl");
const telemetryEventQueue_1 = require("./impl/telemetryEventQueue");
const extensions_1 = require("./utils/extensions");
/**
 * `TelemetryService` builder
 */
class TelemetryServiceBuilder {
    constructor(packageJson) {
        this.packageJson = packageJson;
    }
    setPackageJson(packageJson) {
        this.packageJson = packageJson;
        return this;
    }
    setSettings(settings) {
        this.settings = settings;
        return this;
    }
    setIdProvider(idProvider) {
        this.idProvider = idProvider;
        return this;
    }
    setEnvironment(environment) {
        this.environment = environment;
        return this;
    }
    setConfigurationManager(configManager) {
        this.configurationManager = configManager;
        return this;
    }
    setReporter(reporter) {
        this.reporter = reporter;
        return this;
    }
    setContext(context) {
        this.context = context;
        return this;
    }
    async build() {
        this.validate();
        if (!this.environment) {
            this.environment = {
                extension: {
                    name: (0, extensions_1.getExtensionId)(this.packageJson),
                    version: this.packageJson.version
                },
                application: {
                    name: 'Unknown',
                    version: '-'
                },
                platform: {
                    name: 'Unknown',
                    version: '-'
                }
            };
        }
        const queue = this.settings.isTelemetryConfigured()
            ? undefined
            : new telemetryEventQueue_1.TelemetryEventQueue();
        return new telemetryServiceImpl_1.TelemetryServiceImpl(this.context?.globalState, this.reporter, queue, this.settings, this.idProvider, this.environment, this.configurationManager);
    }
    validate() {
        if (!this.context) {
            throw new Error('context is not set');
        }
        if (!this.idProvider) {
            throw new Error('idProvider is not set');
        }
        if (!this.reporter) {
            throw new Error('reporter is not set');
        }
        if (!this.packageJson) {
            throw new Error('packageJson is not set');
        }
        if (!this.environment) {
            throw new Error('Environment is not set');
        }
    }
}
exports.TelemetryServiceBuilder = TelemetryServiceBuilder;
//# sourceMappingURL=telemetryServiceBuilder.js.map