"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemIdProvider = void 0;
const os = __importStar(require("os"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const logger_1 = require("../common/utils/logger");
const uuid_1 = require("../common/utils/uuid");
let REDHAT_ANONYMOUS_UUID;
/**
* Service providing the Red Hat anonymous user id, read/stored from the `~/.redhat/anonymousId` file.
*/
class FileSystemIdProvider {
    constructor(redhatDir) {
        this.redhatDir = redhatDir;
    }
    async getRedHatUUID() {
        return this.loadRedHatUUID();
    }
    loadRedHatUUID(uuidGenerator) {
        if (REDHAT_ANONYMOUS_UUID) {
            return REDHAT_ANONYMOUS_UUID;
        }
        const redhatUUIDFilePath = this.getAnonymousIdFile();
        try {
            REDHAT_ANONYMOUS_UUID = this.readFile(redhatUUIDFilePath);
            if (REDHAT_ANONYMOUS_UUID) {
                logger_1.Logger.log(`loaded Red Hat UUID: ${REDHAT_ANONYMOUS_UUID}`);
            }
            else {
                logger_1.Logger.log('No Red Hat UUID found');
                REDHAT_ANONYMOUS_UUID = uuidGenerator ? uuidGenerator() : (0, uuid_1.generateUUID)();
                this.writeFile(redhatUUIDFilePath, REDHAT_ANONYMOUS_UUID);
                logger_1.Logger.log(`Written Red Hat UUID: ${REDHAT_ANONYMOUS_UUID} to ${redhatUUIDFilePath}`);
            }
        }
        catch (e) {
            logger_1.Logger.log('Failed to access Red Hat UUID: ' + e?.message);
        }
        return REDHAT_ANONYMOUS_UUID;
    }
    getAnonymousIdFile() {
        const homedir = os.homedir();
        if (!this.redhatDir) {
            this.redhatDir = path.join(homedir, '.redhat');
        }
        return path.join(this.redhatDir, 'anonymousId');
    }
    readFile(filePath) {
        let content;
        if (fs.existsSync(filePath)) {
            content = fs.readFileSync(filePath, { encoding: 'utf8' });
            if (content) {
                content = content.trim();
            }
        }
        return content;
    }
    writeFile(filePath, content) {
        const parentDir = path.dirname(filePath);
        if (!fs.existsSync(parentDir)) {
            fs.mkdirSync(parentDir, { recursive: true });
        }
        fs.writeFileSync(filePath, content, { encoding: 'utf8' });
    }
}
exports.FileSystemIdProvider = FileSystemIdProvider;
//# sourceMappingURL=fileSystemIdManager.js.map