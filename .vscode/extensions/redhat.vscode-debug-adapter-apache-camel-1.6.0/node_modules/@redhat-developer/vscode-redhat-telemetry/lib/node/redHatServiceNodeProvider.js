"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedHatServiceNodeProvider = void 0;
const reporter_1 = require("../common/impl/reporter");
const configurationManager_1 = require("../common/impl/configurationManager");
const telemetryServiceBuilder_1 = require("../common/telemetryServiceBuilder");
const extensions_1 = require("../common/utils/extensions");
const fileSystemStorageService_1 = require("../common/vscode/fileSystemStorageService");
const redhatServiceInitializer_1 = require("../common/vscode/redhatServiceInitializer");
const idManagerFactory_1 = require("./idManagerFactory");
const platform_1 = require("./platform");
const eventCacheService_1 = require("../common/impl/eventCacheService");
class RedHatServiceNodeProvider extends redhatServiceInitializer_1.AbstractRedHatServiceProvider {
    async buildRedHatService() {
        const extensionInfo = await (0, extensions_1.getExtension)(this.context);
        const extensionId = extensionInfo.id;
        const packageJson = (0, extensions_1.getPackageJson)(extensionInfo);
        const storageService = new fileSystemStorageService_1.FileSystemStorageService(this.getCachePath());
        const reporter = new reporter_1.Reporter(this.getSegmentApi(packageJson), new eventCacheService_1.EventCacheService(storageService));
        const idManager = idManagerFactory_1.IdManagerFactory.getIdManager();
        const builder = new telemetryServiceBuilder_1.TelemetryServiceBuilder(packageJson)
            .setContext(this.context)
            .setSettings(this.settings)
            .setIdProvider(idManager)
            .setReporter(reporter)
            .setConfigurationManager(new configurationManager_1.ConfigurationManager(extensionId, storageService))
            .setEnvironment(await (0, platform_1.getEnvironment)(extensionId, packageJson.version));
        const telemetryService = await builder.build();
        return {
            getTelemetryService: () => Promise.resolve(telemetryService),
            getIdProvider: () => Promise.resolve(idManager)
        };
    }
}
exports.RedHatServiceNodeProvider = RedHatServiceNodeProvider;
//# sourceMappingURL=redHatServiceNodeProvider.js.map