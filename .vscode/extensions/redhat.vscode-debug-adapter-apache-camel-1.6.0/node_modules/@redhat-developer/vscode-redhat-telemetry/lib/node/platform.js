"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.USERNAME = exports.UI_KIND = exports.COUNTRY = exports.LOCALE = exports.TIMEZONE = exports.PLATFORM_VERSION = exports.DISTRO = exports.PLATFORM = void 0;
exports.getEnvironment = getEnvironment;
const os_1 = __importDefault(require("os"));
// Can't use os-locale 6.x as it's an ESM module, incompatible with running VS Code electron tests
// See https://github.com/redhat-developer/vscode-redhat-telemetry/issues/30
//import { osLocaleSync } from 'os-locale';
const os_locale_1 = __importDefault(require("os-locale"));
const getos_1 = __importDefault(require("getos"));
const geolocation_1 = require("../common/utils/geolocation");
const vscode_1 = require("vscode");
const util_1 = require("util");
const envVar_1 = __importDefault(require("../common/envVar"));
exports.PLATFORM = getPlatform();
exports.DISTRO = getDistribution();
exports.PLATFORM_VERSION = os_1.default.release();
exports.TIMEZONE = Intl.DateTimeFormat().resolvedOptions().timeZone;
//export const LOCALE = osLocaleSync().replace('_', '-');
exports.LOCALE = os_locale_1.default.sync().replace('_', '-');
exports.COUNTRY = (0, geolocation_1.getCountry)(exports.TIMEZONE);
exports.UI_KIND = getUIKind();
exports.USERNAME = getUsername();
function getPlatform() {
    const platform = os_1.default.platform();
    if (platform.startsWith('win')) {
        return 'Windows';
    }
    if (platform.startsWith('darwin')) {
        return 'Mac';
    }
    return platform.charAt(0).toUpperCase() + platform.slice(1);
}
async function getDistribution() {
    if (os_1.default.platform() === 'linux') {
        const platorm = await (0, util_1.promisify)(getos_1.default)();
        return platorm.dist;
    }
    return undefined;
}
async function getEnvironment(extensionId, extensionVersion) {
    return {
        extension: {
            name: extensionId,
            version: extensionVersion,
        },
        application: {
            name: vscode_1.env.appName,
            version: vscode_1.version,
            uiKind: exports.UI_KIND,
            remote: vscode_1.env.remoteName !== undefined,
            appHost: vscode_1.env.appHost
        },
        platform: {
            name: exports.PLATFORM,
            version: exports.PLATFORM_VERSION,
            distribution: await exports.DISTRO
        },
        timezone: exports.TIMEZONE,
        locale: exports.LOCALE,
        country: exports.COUNTRY,
        username: exports.USERNAME
    };
}
function getUIKind() {
    switch (vscode_1.env.uiKind) {
        case vscode_1.UIKind.Desktop:
            return 'Desktop';
        case vscode_1.UIKind.Web:
            return 'Web';
        default:
            return 'Unknown';
    }
}
function getUsername() {
    let username = (envVar_1.default.SUDO_USER ||
        envVar_1.default.C9_USER /* Cloud9 */ ||
        envVar_1.default.LOGNAME ||
        envVar_1.default.USER ||
        envVar_1.default.LNAME ||
        envVar_1.default.USERNAME);
    if (!username) {
        try {
            username = os_1.default.userInfo().username;
        }
        catch (_) { }
    }
    return username;
}
//# sourceMappingURL=platform.js.map