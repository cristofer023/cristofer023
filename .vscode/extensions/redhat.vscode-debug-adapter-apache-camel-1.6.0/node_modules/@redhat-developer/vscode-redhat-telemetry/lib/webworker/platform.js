"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.USERNAME = exports.UI_KIND = exports.COUNTRY = exports.LOCALE = exports.TIMEZONE = exports.PLATFORM_VERSION = exports.DISTRO = exports.PLATFORM = void 0;
exports.getEnvironment = getEnvironment;
const vscode_1 = require("vscode");
const geolocation_1 = require("../common/utils/geolocation");
const envVar_1 = __importDefault(require("../common/envVar"));
const ua_parser_js_1 = __importDefault(require("ua-parser-js"));
let userAgentInfo;
function getUAInfo() {
    if (userAgentInfo) {
        return userAgentInfo;
    }
    userAgentInfo = new ua_parser_js_1.default(navigator.userAgent).getResult();
    return userAgentInfo;
}
// list of known Linux distros given by ChatGPT ;-), tweaked a bit
const linuxes = /^((.*)Ubuntu(.*)|Debian|Fedora|CentOS|Red Hat|(.*)Linux(.*)|Gentoo|(.*)SUSE(.*)|Slackware|Solus|Manjaro|Raspbian|Elementary OS|Zorin OS|Pop!_OS|Endless OS|Deepin|Tails|BlackArch|BackBox|Parrot Security|Knoppix|Peppermint|LXLE|Chrome OS|CrunchBang|Finnix|FreeNAS|gNewSense|NimbleX|NixOS|Ophcrack|PFSense|pfSense|Sabayon|SliTaz|Zenwalk|ArchBang|ArchLabs|Artix|BlankOn|BlueOnyx|Calcula|Calculate|CRUX|Devuan|Frugalware|Funtoo|GParted|Joli OS|Kanotix|Lakka|Linspire|Madbox|Makulu|NimbleX|NixOS|NST|OpenELEC|OpenIndiana|OpenMandriva|OpenVZ|Q4OS|Qubes OS|ReactOS|Sabayon|Salix|Slackel|Slackware|Slax|SmartOS|SME Server|Sonic|SystemRescueCd|Trisquel|TrueOS|VyOS|XenServer|Zorin OS|CRUX)$/i;
function getPlatform() {
    const platform = (getUAInfo().os.name) ? getUAInfo().os.name : "Unknown";
    if (platform.startsWith('Windows')) {
        return 'Windows';
    }
    if (platform.startsWith('Mac')) {
        return 'Mac';
    }
    if (platform.toLowerCase().indexOf('BSD') > -1) {
        return 'BSD';
    }
    //This is brittle AF. Testing against a bunch of hardcoded distros, the list can only go stale, 
    //but we want to limit the amount of platforms here
    if (linuxes.test(platform)) {
        return "Linux";
    }
    return "Unknown";
}
function getDistribution() {
    const os = getPlatform();
    if (os === 'Linux' || os === 'Unknown' || os === 'BSD' && getUAInfo().os.name) {
        return getUAInfo().os.name;
    }
    return undefined;
}
async function getEnvironment(extensionId, extensionVersion) {
    const browser = getUAInfo().browser;
    return {
        extension: {
            name: extensionId,
            version: extensionVersion,
        },
        application: {
            name: vscode_1.env.appName,
            version: vscode_1.version,
            uiKind: exports.UI_KIND,
            remote: vscode_1.env.remoteName !== undefined,
            appHost: vscode_1.env.appHost
        },
        platform: {
            name: exports.PLATFORM,
            version: exports.PLATFORM_VERSION,
            distribution: exports.DISTRO
        },
        browser: {
            name: browser.name,
            version: browser.version
        },
        timezone: exports.TIMEZONE,
        locale: exports.LOCALE,
        country: exports.COUNTRY,
        username: exports.USERNAME
    };
}
function getUIKind() {
    switch (vscode_1.env.uiKind) {
        case vscode_1.UIKind.Desktop:
            return 'Desktop';
        case vscode_1.UIKind.Web:
            return 'Web';
        default:
            return 'Unknown';
    }
}
function getUsername() {
    let username = (envVar_1.default.SUDO_USER ||
        envVar_1.default.C9_USER /* Cloud9 */ ||
        envVar_1.default.LOGNAME ||
        envVar_1.default.USER ||
        envVar_1.default.LNAME ||
        envVar_1.default.USERNAME);
    return username;
}
exports.PLATFORM = getPlatform();
exports.DISTRO = getDistribution();
exports.PLATFORM_VERSION = getUAInfo().os.version;
exports.TIMEZONE = Intl.DateTimeFormat().resolvedOptions().timeZone;
exports.LOCALE = navigator.language.replace('_', '-');
exports.COUNTRY = (0, geolocation_1.getCountry)(exports.TIMEZONE);
exports.UI_KIND = getUIKind();
exports.USERNAME = getUsername();
//# sourceMappingURL=platform.js.map